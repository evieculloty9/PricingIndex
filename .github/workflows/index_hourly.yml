name: Forward Compute Index — Hourly Build & Deploy

on:
  workflow_dispatch:
  schedule:
    - cron: "5 * * * *"   # every hour at minute 5

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "forward-compute-index"
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.12"
  COMMIT_DATA: "true"

jobs:
  build-and-bundle:
    runs-on: ubuntu-latest
    timeout-minutes: 40

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install dependencies
        run: |
          set -e
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          playwright install chromium || true
          playwright install-deps || true

      - name: Run hourly scrape + index (master runner)
        env:
          HCPI_DATABASE_URL: ${{ secrets.HCPI_DATABASE_URL }}
          LAMBDA_API_KEY:    ${{ secrets.LAMBDA_API_KEY }}
          RUNPOD_API_KEY:    ${{ secrets.RUNPOD_API_KEY }}
        run: |
          set -e
          echo "======================================================================"
          echo "Running master_runner.py for ALL providers..."
          echo "======================================================================"
          python master_runner.py --cron --db "${HCPI_DATABASE_URL:-sqlite:///hcpi.db}"
          echo ""
          echo "✅ Master runner completed successfully"
          echo "======================================================================"

      - name: Verify generated data & history
        run: |
          set -e
          echo "======================================================================"
          echo "VERIFICATION: Checking generated files"
          echo "======================================================================"
          
          echo ""
          echo "==== Latest Provider Scores CSV ===="
          if [ -f data/derived/provider_scores_latest.csv ]; then
            lines=$(wc -l < data/derived/provider_scores_latest.csv)
            echo "✅ Found: data/derived/provider_scores_latest.csv ($lines lines)"
            echo ""
            echo "First 3 rows:"
            head -3 data/derived/provider_scores_latest.csv || true
            echo ""
            echo "Last 3 rows:"
            tail -3 data/derived/provider_scores_latest.csv || true
          else
            echo "❌ ERROR: Latest CSV not found!"
            exit 1
          fi
          
          echo ""
          echo "==== Provider History CSV ===="
          if [ -f data/history/provider_scores_history.csv ]; then
            lines=$(wc -l < data/history/provider_scores_history.csv)
            echo "✅ Found: data/history/provider_scores_history.csv ($lines lines)"
            echo ""
            echo "Last 5 entries:"
            tail -5 data/history/provider_scores_history.csv || true
          else
            echo "⚠️  WARNING: History CSV not found (will be created on first run)"
          fi
          
          echo ""
          echo "==== HCPI History JSON ===="
          if [ -f hcpi/hcpi_history.json ]; then
            points=$(grep -o '"timestamp"' hcpi/hcpi_history.json | wc -l)
            size=$(ls -lh hcpi/hcpi_history.json | awk '{print $5}')
            echo "✅ Found: hcpi/hcpi_history.json ($points data points, $size)"
            echo ""
            echo "Last entry:"
            tail -15 hcpi/hcpi_history.json || true
          else
            echo "⚠️  WARNING: HCPI history JSON not found (will be created on first run)"
          fi
          
          echo ""
          echo "==== HCPI Latest Summary ===="
          if [ -f hcpi/hcpi_latest_summary.json ]; then
            echo "✅ Found: hcpi/hcpi_latest_summary.json"
            cat hcpi/hcpi_latest_summary.json || true
          else
            echo "⚠️  WARNING: HCPI latest summary not found"
          fi
          
          echo ""
          echo "======================================================================"
          echo "✅ Verification complete"
          echo "======================================================================"

      - name: Commit generated data to repository
        if: env.COMMIT_DATA == 'true'
        uses: EndBug/add-and-commit@v9
        with:
          add: |
            data/derived/*.csv
            data/history/*.csv
            hcpi/*.json
            hcpi/*.csv
          message: "ci: hourly data update [skip ci]"
          author_name: github-actions
          author_email: actions@github.com
          default_author: github_actor

      - name: 🏗️ Prepare static site (public/)
        run: |
          set -e
          echo "======================================================================"
          echo "Preparing static site for GitHub Pages"
          echo "======================================================================"
          
          mkdir -p public/data/derived public/data/history public/hcpi
          
          echo ""
          echo "==== Copying HTML dashboard ===="
          if [ -f docs/index.html ]; then
            cp -v docs/index.html public/index.html
            echo "✅ Copied docs/index.html"
          elif [ -f index.html ]; then
            cp -v index.html public/index.html
            echo "✅ Copied index.html"
          else
            echo "⚠️  No dashboard HTML found, creating placeholder..."
            cat > public/index.html << 'EOF'
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Forward Compute Index</title>
  <style>
    body {
      font-family: system-ui, -apple-system, sans-serif;
      padding: 24px;
      color: #e7edf3;
      background: #0f1216;
      max-width: 800px;
      margin: 0 auto;
    }
    h1 { color: #58a6ff; }
    code {
      background: #161b22;
      padding: 2px 6px;
      border-radius: 3px;
      font-size: 0.9em;
    }
  </style>
</head>
<body>
  <h1>Forward Compute Index</h1>
  <p>Dashboard placeholder. Add <code>docs/index.html</code> to the repository to display your index.</p>
  <h2>Available Data Files:</h2>
  <ul>
    <li><a href="hcpi/hcpi_latest_summary.json">Latest Index Summary</a></li>
    <li><a href="hcpi/hcpi_history.json">Historical Index Data</a></li>
    <li><a href="data/derived/provider_scores_latest.csv">Latest Provider Scores</a></li>
  </ul>
</body>
</html>
EOF
            echo "✅ Created placeholder HTML"
          fi
          
          echo ""
          echo "==== Copying data files ===="
          cp -v data/derived/*.csv public/data/derived/ 2>/dev/null || echo "No derived CSV files to copy"
          cp -v data/history/*.csv  public/data/history/  2>/dev/null || echo "No history CSV files to copy"
          cp -v hcpi/*.json         public/hcpi/          2>/dev/null || echo "No HCPI JSON files to copy"
          cp -v hcpi/*.csv          public/hcpi/          2>/dev/null || echo "No HCPI CSV files to copy"

          echo ""
          echo "==== Verification of copied files ===="
          if [ -f public/data/derived/provider_scores_latest.csv ]; then
            lines=$(wc -l < public/data/derived/provider_scores_latest.csv)
            echo "✅ Latest CSV: $lines lines"
          fi
          
          if [ -f public/data/history/provider_scores_history.csv ]; then
            lines=$(wc -l < public/data/history/provider_scores_history.csv)
            echo "✅ History CSV: $lines lines"
          fi
          
          if [ -f public/hcpi/hcpi_history.json ]; then
            points=$(grep -o '"timestamp"' public/hcpi/hcpi_history.json | wc -l)
            size=$(ls -lh public/hcpi/hcpi_history.json | awk '{print $5}')
            echo " HCPI History JSON: $points points, $size"
          fi

          echo ""
          echo "==== Complete public/ directory structure ===="
          find public -type f -print | sort
          
          echo ""
          echo "======================================================================"
          echo "Static site preparation complete"
          echo "======================================================================"

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

  deploy:
    needs: build-and-bundle
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment:
      name: github-pages
    permissions:
      pages: write
      id-token: write
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Display deployment URL
        run: |
          echo "======================================================================"
          echo "🚀 Deployment complete!"
          echo "======================================================================"
          echo ""
          echo "Your site is available at:"
          echo "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
          echo ""
          echo "======================================================================"


